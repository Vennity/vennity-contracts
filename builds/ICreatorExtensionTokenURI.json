{
  "contractName": "ICreatorExtensionTokenURI",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implement this if you want your extension to have overloadable URI's\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"tokenURI(address,uint256)\":{\"notice\":\"Get the uri for a given creator/tokenId\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol\":\"ICreatorExtensionTokenURI\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol\":{\"keccak256\":\"0x6c8ca804ee7dea9d78f0dacdd9233b1b75ca2b2fa517f52f0fdf6beb34780a51\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4a04a6f0cce2bbdb022a8125e147519c7fbaa89692c8f0cfee69a67a2956316f\",\"dweb:/ipfs/QmdUxwBEnFshm1j5FEcJctC7DbFWUznis2LaPcKR7FEZX7\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Implement this if you want your extension to have overloadable URI's\n */\ninterface ICreatorExtensionTokenURI is IERC165 {\n\n    /**\n     * Get the uri for a given creator/tokenId\n     */\n    function tokenURI(address creator, uint256 tokenId) external view returns (string memory);\n}\n",
  "sourcePath": "@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol",
  "ast": {
    "absolutePath": "@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol",
    "exportedSymbols": {
      "ICreatorExtensionTokenURI": [
        3141
      ],
      "IERC165": [
        6219
      ]
    },
    "id": 3142,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3126,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:7"
      },
      {
        "absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
        "file": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
        "id": 3127,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 3142,
        "sourceUnit": 6220,
        "src": "85:65:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 3129,
              "name": "IERC165",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 6219,
              "src": "276:7:7"
            },
            "id": 3130,
            "nodeType": "InheritanceSpecifier",
            "src": "276:7:7"
          }
        ],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 3128,
          "nodeType": "StructuredDocumentation",
          "src": "152:84:7",
          "text": " @dev Implement this if you want your extension to have overloadable URI's"
        },
        "fullyImplemented": false,
        "id": 3141,
        "linearizedBaseContracts": [
          3141,
          6219
        ],
        "name": "ICreatorExtensionTokenURI",
        "nameLocation": "247:25:7",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 3131,
              "nodeType": "StructuredDocumentation",
              "src": "291:58:7",
              "text": " Get the uri for a given creator/tokenId"
            },
            "functionSelector": "e9dc6375",
            "id": 3140,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "tokenURI",
            "nameLocation": "363:8:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3136,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3133,
                  "mutability": "mutable",
                  "name": "creator",
                  "nameLocation": "380:7:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 3140,
                  "src": "372:15:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3132,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "372:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3135,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "397:7:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 3140,
                  "src": "389:15:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3134,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "389:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "371:34:7"
            },
            "returnParameters": {
              "id": 3139,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3138,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3140,
                  "src": "429:13:7",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3137,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "429:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "428:15:7"
            },
            "scope": 3141,
            "src": "354:90:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 3142,
        "src": "237:209:7",
        "usedErrors": []
      }
    ],
    "src": "33:414:7"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.7+commit.e28d00a7.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.7",
  "updatedAt": "2022-06-09T20:22:52.446Z",
  "devdoc": {
    "details": "Implement this if you want your extension to have overloadable URI's",
    "kind": "dev",
    "methods": {
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "tokenURI(address,uint256)": {
        "notice": "Get the uri for a given creator/tokenId"
      }
    },
    "version": 1
  },
  "db": {
    "callBytecode": {
      "id": "0x2cdc5c5f756f555319272af6740217ecb0d9451b44e748689b42eb518eb5ef1b"
    },
    "createBytecode": {
      "id": "0x2cdc5c5f756f555319272af6740217ecb0d9451b44e748689b42eb518eb5ef1b"
    },
    "contract": {
      "id": "0x91b05425acb63f79216bb66a609ce7251d1a23e4b0b85ff5c09a976bbb91a4a4"
    }
  }
}